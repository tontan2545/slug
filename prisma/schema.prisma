generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Link {
    id          Int         @id @default(autoincrement())
    name        String
    url         String      @db.Text
    slug        String      @unique
    description String?
    createdAt   DateTime    @default(now()) @map("created_at")
    user        User?       @relation(fields: [userId], references: [id])
    userId      String      @map("user_id")
    Analytics   Analytics[]

    @@index(slug)
    @@index([userId])
    @@map("link")
}

model Analytics {
    id        Int      @id @default(autoincrement())
    linkId    Int      @map("link_id")
    createdAt DateTime @default(now()) @map("created_at")
    link      Link     @relation(fields: [linkId], references: [id])
    agent     String?
    country   String?
    city      String?
    region    String?
    continent String?
    ip        String?

    @@index([linkId])
    @@map("analytics")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    username      String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    accounts      Account[]
    sessions      Session[]
    links         Link[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
